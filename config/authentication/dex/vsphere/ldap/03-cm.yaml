#@ load("@ytt:data", "data")
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dex
  namespace: tanzu-system-auth
data:
  #@yaml/text-templated-strings
  config.yaml: |
    issuer: https://(@= data.values.mgmt_cluster_ips[0] @):30167
    frontend:
      theme: tkg
    web:
      https: 0.0.0.0:5556
      tlsCert: /etc/dex/tls/tls.crt
      tlsKey: /etc/dex/tls/tls.key      
    expiry:
      signingKeys: "10m"
      idTokens: "5m"
    logger:
      level: "debug"
      format: "json"

    staticClients:
    - id: (@= data.values.workload_cluster_name @)
      redirectURIs:
      - (@= "https://{}:30166/callback".format(data.values.workload_cluster_ips[0]) @)
      name: (@= data.values.workload_cluster_name @)
      secret: (@= data.values.gangway_client_secret @)
    connectors:
    - type: ldap
      # Required field for connector id.
      id: ldap
      # Required field for connector name.
      name: LDAP
      config:
        # Host and optional port of the LDAP server in the form "host:port".
        # If the port is not supplied, it will be guessed based on "insecureNoSSL",
        # and "startTLS" flags. 389 for insecure or StartTLS connections, 636
        # otherwise.
        host: (@= data.values.ldap_host @)

        # Following field is required if the LDAP host is not using TLS (port 389).
        # Because this option inherently leaks passwords to anyone on the same network
        # as dex, THIS OPTION MAY BE REMOVED WITHOUT WARNING IN A FUTURE RELEASE.
        #
        # insecureNoSSL: true

        # If a custom certificate isn't provide, this option can be used to turn on
        # TLS certificate checks. As noted, it is insecure and shouldn't be used outside
        # of explorative phases.
        #
        insecureSkipVerify: false

        # When connecting to the server, connect using the ldap:// protocol then issue
        # a StartTLS command. If unspecified, connections will use the ldaps:// protocol
        #
        # startTLS: true

        # Path to a trusted root certificate file. Default: use the host's root CA.
        #rootCA: /etc/dex/ldap.ca

        # A raw certificate file can also be provided inline.
        # rootCAData: ( base64 encoded PEM file )

        # The DN and password for an application service account. The connector uses
        # these credentials to search for users and groups. Not required if the LDAP
        # server provides access for anonymous auth.
        # Please note that if the bind password contains a `$`, it has to be saved in an
        # environment variable which should be given as the value to `bindPW`.
        bindDN: (@= data.values.ldap_bind_dn @)
        bindPW: (@= data.values.ldap_bind_pw @)

        # The attribute to display in the provided password prompt. If unset, will
        # display "Username"
        usernamePrompt: LDAP Username

        # User search maps a username and password entered by a user to a LDAP entry.
        userSearch:
          # BaseDN to start the search from. It will translate to the query
          # "(&(objectClass=person)(uid=<username>))".
          baseDN: (@= data.values.ldap_user_search_base_dn @)
          # Optional filter to apply when searching the directory.
          filter: "(objectClass=person)"

          # username attribute used for comparing user entries. This will be translated
          # and combined with the other filter as "(<attr>=<username>)".
          username: (@= data.values.ldap_user_search_username @)
          # The following three fields are direct mappings of attributes on the user entry.
          # String representation of the user.
          idAttr: (@= data.values.ldap_user_search_id_attr @)
          # Required. Attribute to map to Email.
          emailAttr: (@= data.values.ldap_user_search_email_attr @)
          # Maps to display name of users. No default value.
          nameAttr: (@= data.values.ldap_user_search_name_attr @)

        # Group search queries for groups given a user entry.
        groupSearch:
          # BaseDN to start the search from. It will translate to the query
          # "(&(objectClass=group)(member=<user uid>))".
          baseDN: (@= data.values.ldap_group_search_base_dn @)
          # Optional filter to apply when searching the directory.
          filter: "(objectClass=groupOfNames)"

          # Following two fields are used to match a user to a group. It adds an additional
          # requirement to the filter that an attribute in the group must match the user's
          # attribute value.
          userAttr: (@= data.values.ldap_group_search_user_attr @)
          groupAttr: (@= data.values.ldap_group_search_group_attr @)
          nameAttr: (@= data.values.ldap_group_search_name_attr @)
        
    oauth2:
      skipApprovalScreen: true
      responseTypes: ["code", "token", "id_token"]
    storage:
      type: kubernetes
      config:
        inCluster: true

    enablePasswordDB: false
